<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacetests_1_1test__doc__commands" kind="namespace" language="Python">
    <compoundname>tests::test_doc_commands</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a806110833eb0aad547156faf014b31d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_no_location</definition>
        <argsstring>(mock_getcwd, mock_api_client, mock_folder_analyzer, mock_file_analyzer, mock_git_analyzer)</argsstring>
        <name>test_generate_doc_no_location</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_no_location</qualifiedname>
        <param>
          <type>mock_getcwd</type>
          <defname>mock_getcwd</defname>
        </param>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_folder_analyzer</type>
          <defname>mock_folder_analyzer</defname>
        </param>
        <param>
          <type>mock_file_analyzer</type>
          <defname>mock_file_analyzer</defname>
        </param>
        <param>
          <type>mock_git_analyzer</type>
          <defname>mock_git_analyzer</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test function to generate documentation without location information.

This function sets up mocks for the API client, current working
directory, and Git analyzer. It then calls the `generate_doc` function
with a fake API URL and token. The function is expected to initialize
the API client, configure the Git analyzer, and run it without any
location information.

Args:
    mock_getcwd (MagicMock): Mock for os.getcwd().
    mock_api_client (MagicMock): Mock for creating an API client.
    mock_folder_analyzer (MagicMock): Mock for folder analysis.
    mock_file_analyzer (MagicMock): Mock for file analysis.
    mock_git_analyzer (MagicMock): Mock for Git analyzer setup.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="21" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="23" bodyend="61"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a0e74c920f258f442914771164fe26b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_file_location</definition>
        <argsstring>(mock_api_client, mock_folder_analyzer, mock_file_analyzer, mock_git_analyzer)</argsstring>
        <name>test_generate_doc_file_location</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_file_location</qualifiedname>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_folder_analyzer</type>
          <defname>mock_folder_analyzer</defname>
        </param>
        <param>
          <type>mock_file_analyzer</type>
          <defname>mock_file_analyzer</defname>
        </param>
        <param>
          <type>mock_git_analyzer</type>
          <defname>mock_git_analyzer</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test generating a documentation file location.

This function tests the process of generating a documentation file
location using mock objects for API client, folder analyzer, file
analyzer, and Git analyzer. It sets up the necessary mocks, calls the
`generate_doc` function with specified parameters, and asserts that the
appropriate methods on the mock objects are called as expected.

Args:
    mock_api_client (MagicMock): Mock object for the API client.
    mock_folder_analyzer (MagicMock): Mock object for the folder analyzer.
    mock_file_analyzer (MagicMock): Mock object for the file analyzer.
    mock_git_analyzer (MagicMock): Mock object for the Git analyzer.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="62" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="63" bodyend="99"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a4bb75610e40d94d42bc169b25403c186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_folder_location</definition>
        <argsstring>(mock_api_client, mock_folder_analyzer, mock_file_analyzer, mock_git_analyzer)</argsstring>
        <name>test_generate_doc_folder_location</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_folder_location</qualifiedname>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_folder_analyzer</type>
          <defname>mock_folder_analyzer</defname>
        </param>
        <param>
          <type>mock_file_analyzer</type>
          <defname>mock_file_analyzer</defname>
        </param>
        <param>
          <type>mock_git_analyzer</type>
          <defname>mock_git_analyzer</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the function to generate documentation for a folder location.

It sets up mock objects for API client, folder analyzer, file analyzer,
and Git analyzer, then calls the `generate_doc` function with specified
parameters. Finally, it asserts that the correct methods on the mock
objects were called as expected.

Args:
    mock_api_client (MagicMock): Mock object for the API client.
    mock_folder_analyzer (MagicMock): Mock object for the folder analyzer.
    mock_file_analyzer (MagicMock): Mock object for the file analyzer.
    mock_git_analyzer (MagicMock): Mock object for the Git analyzer.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="100" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="101" bodyend="135"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1aec76cc25c23476794234cdadbcaef0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_error_handling</definition>
        <argsstring>(mock_api_client, mock_git_analyzer, mock_exit)</argsstring>
        <name>test_generate_doc_error_handling</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_error_handling</qualifiedname>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_git_analyzer</type>
          <defname>mock_git_analyzer</defname>
        </param>
        <param>
          <type>mock_exit</type>
          <defname>mock_exit</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate a documentation string for the provided code snippet using
Google Docstring style.

Short one line description: Test function to ensure proper error
handling during API calls with GitAnalyzer.  Multiline long description:
This test function is designed to verify that the generate_doc function
handles exceptions correctly when an error occurs during API interaction
with GitAnalyzer. It sets up a mock API client and a mock Git analyzer,
causing the analyzer to raise an exception to simulate a failure
condition. The function then asserts that the exit code is set to 1 when
the error handling mechanism is invoked.

Args:
    mock_api_client (MagicMock): A mock object simulating the API client.
    mock_git_analyzer (MagicMock): A mock object simulating the Git analyzer, configured to raise an
        exception.
    mock_exit (MagicMock): A mock object representing the exit function, which should be called
        with an error code.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="136" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="136" bodyend="168"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a0f27751d0ba2acfe40ef7e85bccf47d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_setup_docgen_parser</definition>
        <argsstring>()</argsstring>
        <name>test_setup_docgen_parser</name>
        <qualifiedname>tests.test_doc_commands.test_setup_docgen_parser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the setup_docgen_parser function to ensure it properly configures
the ArgumentParser for docgen options.

It verifies that the parser correctly sets up docgen options and handles
different subcommands like &apos;install-hook&apos; and &apos;uninstall-hook&apos;.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="169" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="169" bodyend="199"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1acc7f4ead1b11951d885fa5c151c2cbe0" compoundref="doc__commands_8py" startline="83" endline="124">penify_hook.commands.doc_commands.setup_docgen_parser</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1ab74688baa8c9b5ba302c2877a9789d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_handle_docgen_install_hook</definition>
        <argsstring>(mock_exit, mock_get_token, mock_generate_doc, mock_uninstall_hook, mock_install_hook)</argsstring>
        <name>test_handle_docgen_install_hook</name>
        <qualifiedname>tests.test_doc_commands.test_handle_docgen_install_hook</qualifiedname>
        <param>
          <type>mock_exit</type>
          <defname>mock_exit</defname>
        </param>
        <param>
          <type>mock_get_token</type>
          <defname>mock_get_token</defname>
        </param>
        <param>
          <type>mock_generate_doc</type>
          <defname>mock_generate_doc</defname>
        </param>
        <param>
          <type>mock_uninstall_hook</type>
          <defname>mock_uninstall_hook</defname>
        </param>
        <param>
          <type>mock_install_hook</type>
          <defname>mock_install_hook</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the handling of the &apos;install-hook&apos; subcommand.

This function sets up a mock environment where it simulates the
execution of the &apos;install-hook&apos; subcommand. It verifies that the
`mock_install_hook` is called with the correct arguments, while
`mock_generate_doc` and `mock_uninstall_hook` are not called.

Args:
    mock_exit (MagicMock): Mock object for sys.exit.
    mock_get_token (MagicMock): Mock object to simulate fetching a token.
    mock_generate_doc (MagicMock): Mock object to simulate generating documentation.
    mock_uninstall_hook (MagicMock): Mock object to simulate uninstalling a hook.
    mock_install_hook (MagicMock): Mock object to simulate installing a hook.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="200" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="201" bodyend="232"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a2006ab13bff718ef783868a910c0b704" compoundref="doc__commands_8py" startline="125" endline="158">penify_hook.commands.doc_commands.handle_docgen</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a1458af9ad0128c3ca1263b552fd5e482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_handle_docgen_uninstall_hook</definition>
        <argsstring>(mock_exit, mock_get_token, mock_generate_doc, mock_uninstall_hook, mock_install_hook)</argsstring>
        <name>test_handle_docgen_uninstall_hook</name>
        <qualifiedname>tests.test_doc_commands.test_handle_docgen_uninstall_hook</qualifiedname>
        <param>
          <type>mock_exit</type>
          <defname>mock_exit</defname>
        </param>
        <param>
          <type>mock_get_token</type>
          <defname>mock_get_token</defname>
        </param>
        <param>
          <type>mock_generate_doc</type>
          <defname>mock_generate_doc</defname>
        </param>
        <param>
          <type>mock_uninstall_hook</type>
          <defname>mock_uninstall_hook</defname>
        </param>
        <param>
          <type>mock_install_hook</type>
          <defname>mock_install_hook</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the uninstall-hook subcommand of the handle_docgen function.
This test case sets up a mock environment and verifies that the
uninstall-hook is called with the correct location, while generate_doc
and install_hook are not called.

Args:
    mock_exit (MagicMock): A mock for the exit function.
    mock_get_token (MagicMock): A mock for the get_token function.
    mock_generate_doc (MagicMock): A mock for the generate_doc function.
    mock_uninstall_hook (MagicMock): A mock for the uninstall_hook function.
    mock_install_hook (MagicMock): A mock for the install_hook function.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="233" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="234" bodyend="262"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a2006ab13bff718ef783868a910c0b704" compoundref="doc__commands_8py" startline="125" endline="158">penify_hook.commands.doc_commands.handle_docgen</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1ab158ffa48469b6c097a7a55fcb20c21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_handle_docgen_generate</definition>
        <argsstring>(mock_get_token, mock_generate_doc, mock_uninstall_hook, mock_install_hook)</argsstring>
        <name>test_handle_docgen_generate</name>
        <qualifiedname>tests.test_doc_commands.test_handle_docgen_generate</qualifiedname>
        <param>
          <type>mock_get_token</type>
          <defname>mock_get_token</defname>
        </param>
        <param>
          <type>mock_generate_doc</type>
          <defname>mock_generate_doc</defname>
        </param>
        <param>
          <type>mock_uninstall_hook</type>
          <defname>mock_uninstall_hook</defname>
        </param>
        <param>
          <type>mock_install_hook</type>
          <defname>mock_install_hook</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the direct documentation generation functionality.

This function tests the `handle_docgen` function when no subcommand is
provided. It verifies that the document generation hook is called and
the uninstall and install hooks are not called.

Args:
    mock_get_token (MagicMock): Mocked function to get authentication token.
    mock_generate_doc (MagicMock): Mocked function for generating documentation.
    mock_uninstall_hook (MagicMock): Mocked function for uninstalling the document generation hook.
    mock_install_hook (MagicMock): Mocked function for installing the document generation hook.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="263" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="264" bodyend="290"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a2006ab13bff718ef783868a910c0b704" compoundref="doc__commands_8py" startline="125" endline="158">penify_hook.commands.doc_commands.handle_docgen</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1af9b01e5fc89255cac96747fa081c442c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_handle_docgen_no_token</definition>
        <argsstring>(mock_exit, mock_get_token)</argsstring>
        <name>test_handle_docgen_no_token</name>
        <qualifiedname>tests.test_doc_commands.test_handle_docgen_no_token</qualifiedname>
        <param>
          <type>mock_exit</type>
          <defname>mock_exit</defname>
        </param>
        <param>
          <type>mock_get_token</type>
          <defname>mock_get_token</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Test the behavior of the `handle_docgen` function when no token is
provided.

This function asserts that if no token is returned by `mock_get_token`,
the `handle_docgen` function will call `mock_exit` with a status code of
1.

Args:
    mock_exit (MagicMock): A MagicMock object simulating the `exit` function.
    mock_get_token (MagicMock): A MagicMock object simulating the `get_token` function.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="291" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="291" bodyend="312"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a2006ab13bff718ef783868a910c0b704" compoundref="doc__commands_8py" startline="125" endline="158">penify_hook.commands.doc_commands.handle_docgen</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a335e7fd4912192c7276cf31bbebc6eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_with_file_exception</definition>
        <argsstring>(mock_api_client, mock_getcwd)</argsstring>
        <name>test_generate_doc_with_file_exception</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_with_file_exception</qualifiedname>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_getcwd</type>
          <defname>mock_getcwd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate documentation from a Python source file.

This function reads a Python file and generates a docstring based on its
content. It uses mock objects to simulate API calls and directory
operations during testing.

Args:
    mock_api_client (unittest.mock.MagicMock): A mock object for simulating API client behavior.
    mock_getcwd (unittest.mock.MagicMock): A mock object for simulating the current working directory function.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="313" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="313" bodyend="335"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      <memberdef kind="function" id="namespacetests_1_1test__doc__commands_1a64165ddfdb3071a88422f080f0e529a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def tests.test_doc_commands.test_generate_doc_with_folder_exception</definition>
        <argsstring>(mock_api_client, mock_getcwd)</argsstring>
        <name>test_generate_doc_with_folder_exception</name>
        <qualifiedname>tests.test_doc_commands.test_generate_doc_with_folder_exception</qualifiedname>
        <param>
          <type>mock_api_client</type>
          <defname>mock_api_client</defname>
        </param>
        <param>
          <type>mock_getcwd</type>
          <defname>mock_getcwd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate documentation from a given API endpoint and save it to a
folder.

This function fetches data from the specified API endpoint, processes
it, and saves the generated documentation in the provided folder. If an
error occurs during the fetching process, a SystemExit exception is
raised with an appropriate message.

Args:
    api_url (str): The URL of the API endpoint from which data will be fetched.
    token (str): The authentication token required to access the API.
    folder_path (str): The path to the folder where the documentation will be saved.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="336" column="1" bodyfile="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" bodystart="336" bodyend="358"/>
        <references refid="namespacepenify__hook_1_1commands_1_1doc__commands_1a4daac68bc563432bf25c85dc78081a25" compoundref="doc__commands_8py" startline="8" endline="73">penify_hook.commands.doc_commands.generate_doc</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/test_doc_commands.py" line="1" column="1"/>
  </compounddef>
</doxygen>
