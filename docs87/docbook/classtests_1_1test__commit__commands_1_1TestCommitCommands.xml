<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands" xml:lang="en-US">
<title>tests.test_commit_commands.TestCommitCommands Class Reference</title>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary></indexterm>
Collaboration diagram for tests.test_commit_commands.TestCommitCommands:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2">mock_api_client</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a20e78370ff5bd6223cc1dd4323a86ea4">mock_llm_client</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a05adaa9a713ff1be657455d0667bc6be">mock_jira_client</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1aa9b25a4bf692b8736164695072a398f6">mock_commit_doc_gen</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e">mock_git_folder_search</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1afafbae3c9aeb0e50a75996256c02c8be">mock_print_functions</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1acc4b1e4189792a3f7c11d2a745f479c0">test_commit_code_with_llm_client</link> (self, mock_error, mock_warning, mock_info, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e">mock_git_folder_search</link>, mock_doc_gen, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a20e78370ff5bd6223cc1dd4323a86ea4">mock_llm_client</link>, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2">mock_api_client</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1af9c09013055ec39ddde86b487aefcf8b">test_commit_code_with_jira_client</link> (self, mock_error, mock_warning, mock_info, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e">mock_git_folder_search</link>, mock_doc_gen, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a05adaa9a713ff1be657455d0667bc6be">mock_jira_client</link>, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a20e78370ff5bd6223cc1dd4323a86ea4">mock_llm_client</link>, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2">mock_api_client</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1acea0d934ee0f2b914b0b893736e8fe4e">test_commit_code_with_jira_connection_failure</link> (self, mock_error, mock_warning, mock_info, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e">mock_git_folder_search</link>, mock_doc_gen, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a05adaa9a713ff1be657455d0667bc6be">mock_jira_client</link>, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2">mock_api_client</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a43c2ff3707124aa48e8eb581106b8691">test_commit_code_error_handling</link> (self, mock_print, mock_exit, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e">mock_git_folder_search</link>, mock_doc_gen, <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2">mock_api_client</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a4d04b125e102190a768f65f1948f15bc">test_setup_commit_parser</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1ac13e368262340af98b30fd8ebdac6597">test_handle_commit</link> (self, mock_print_info, mock_commit_code, mock_get_token, mock_get_llm_config, mock_get_jira_config)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1abcd2354a2af4afe19e57877628d3acc2"/><section>
    <title>mock_api_client()</title>
<indexterm><primary>mock_api_client</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_api_client</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_api_client ( self)</computeroutput></para>
<para><literallayout><computeroutput>Mocks an instance of APIClient using unittest.mock.

This function creates a mock object for APIClient and yields it along
with the mocked instance. It is useful for testing purposes where real
API calls should be avoided.

Yields:
    tuple: A tuple containing the mock of APIClient and the mocked instance of
        APIClient.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1aa9b25a4bf692b8736164695072a398f6"/><section>
    <title>mock_commit_doc_gen()</title>
<indexterm><primary>mock_commit_doc_gen</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_commit_doc_gen</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_commit_doc_gen ( self)</computeroutput></para>
<para><literallayout><computeroutput>Mocks the CommitDocGenHook class and returns a MagicMock instance.

This function uses the `patch` decorator from the `unittest.mock` module
to create a mock of the `CommitDocGenHook` class. It then sets up this
mock to return a new `MagicMock` instance when invoked. The function
yields both the mock object and the mocked instance, allowing for easy
testing of functions that rely on `CommitDocGenHook`.

Returns:
    tuple: A tuple containing two elements:
        - mock (patch): The patch object used to mock the `CommitDocGenHook`
        class.
        - doc_gen_instance (MagicMock): The mocked instance of
        `CommitDocGenHook`.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a2842f456a8c0f1bf0f4def17c183c04e"/><section>
    <title>mock_git_folder_search()</title>
<indexterm><primary>mock_git_folder_search</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_git_folder_search</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_git_folder_search ( self)</computeroutput></para>
<para><literallayout><computeroutput>Mock the `recursive_search_git_folder` function to return a predefined
git folder path.

This function uses the `patch` decorator from the `unittest.mock` module
to intercept calls to `penify_hook.utils.recursive_search_git_folder`.
When called, it will return &apos;/mock/git/folder&apos; instead of performing an
actual search. This is useful for testing purposes where you need a
consistent response without interacting with the file system.

Yields:
    MagicMock: A mock object that simulates the `recursive_search_git_folder` function.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a05adaa9a713ff1be657455d0667bc6be"/><section>
    <title>mock_jira_client()</title>
<indexterm><primary>mock_jira_client</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_jira_client</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_jira_client ( self)</computeroutput></para>
<para><literallayout><computeroutput>Create a mock JIRA client for testing purposes.

This function yields a tuple containing a mock JIRA client instance and
its `is_connected` method. The mock client is configured to simulate an
active connection. This is useful for unit tests that require
interaction with a JIRA client without making actual network calls.

Yields:
    tuple: A tuple containing the mocked JIRA client instance and its
        `is_connected` method.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a20e78370ff5bd6223cc1dd4323a86ea4"/><section>
    <title>mock_llm_client()</title>
<indexterm><primary>mock_llm_client</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_llm_client</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_llm_client ( self)</computeroutput></para>
<para><literallayout><computeroutput>Mock an instance of LLMClient for testing purposes.

This function yields a mock object representing an instance of
LLMClient, which can be used to simulate interactions with a language
model during testing. The mock is patched to replace the actual
LLMClient class from the penify_hook module.

Yields:
    tuple: A tuple containing two elements:
        - mock (MagicMock): The mock object for LLMClient.
        - llm_client_instance (MagicMock): An instance of the mocked LLMClient.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1afafbae3c9aeb0e50a75996256c02c8be"/><section>
    <title>mock_print_functions()</title>
<indexterm><primary>mock_print_functions</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>mock_print_functions</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.mock_print_functions ( self)</computeroutput></para>
<para><literallayout><computeroutput>Mocks the print functions from `penify_hook.ui_utils` for testing
purposes.

This function uses Python&apos;s `unittest.mock.patch` to replace the actual
print functions (`print`, `print_warning`, and `print_error`) with mock
objects. These mock objects can be used in tests to capture calls made
to these print functions without actually printing anything.

Yields:
    tuple: A tuple containing three mock objects corresponding to `print_info`,
        `print_warning`,
        and `print_error`.
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a43c2ff3707124aa48e8eb581106b8691"/><section>
    <title>test_commit_code_error_handling()</title>
<indexterm><primary>test_commit_code_error_handling</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_commit_code_error_handling</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_commit_code_error_handling ( self,  mock_print,  mock_exit,  mock_git_folder_search,  mock_doc_gen,  mock_api_client)</computeroutput></para>
<para><literallayout><computeroutput>Test the error handling in the test_commit_code function.

This function sets up mocks to simulate exceptions and test the error
handling of the commit_code function. It verifies that the function
correctly prints an error message and exits with a status code of 1 when
an exception occurs during documentation generation.

Args:
    mock_print (MagicMock): Mock for the print function, used to verify error message output.
    mock_exit (MagicMock): Mock for the sys.exit function, used to verify exit behavior.
    mock_git_folder_search (MagicMock): Mock for the git_folder_search function, returning a mock Git folder
        path.
    mock_doc_gen (MagicMock): Mock for the doc_gen function, simulating an exception during
        documentation generation.
    mock_api_client (MagicMock): Mock for the API client class, not directly used but referenced in the
        function signature.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_a43c2ff3707124aa48e8eb581106b8691_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1af9c09013055ec39ddde86b487aefcf8b"/><section>
    <title>test_commit_code_with_jira_client()</title>
<indexterm><primary>test_commit_code_with_jira_client</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_commit_code_with_jira_client</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_commit_code_with_jira_client ( self,  mock_error,  mock_warning,  mock_info,  mock_git_folder_search,  mock_doc_gen,  mock_jira_client,  mock_llm_client,  mock_api_client)</computeroutput></para>
<para><literallayout><computeroutput>Test committing code using a JIRA client.

This function tests the commit_code function with various parameters,
including API and JIRA credentials. It sets up mock objects for
dependencies such as the JIRA client, LLM client, and doc generator to
simulate the behavior of the real classes. The function then calls
commit_code and verifies that the JIRA client and doc generator are
called with the correct parameters.

Args:
    mock_error (MagicMock): A MagicMock object for simulating error logging.
    mock_warning (MagicMock): A MagicMock object for simulating warning logging.
    mock_info (MagicMock): A MagicMock object for simulating info logging.
    mock_git_folder_search (MagicMock): A MagicMock object for simulating the git folder search function.
    mock_doc_gen (MagicMock): A MagicMock object for simulating the doc generator function.
    mock_jira_client (MagicMock): A MagicMock object for simulating the JIRA client class.
    mock_llm_client (MagicMock): A MagicMock object for simulating the LLM client class.
    mock_api_client (MagicMock): A MagicMock object for simulating the API client class.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_af9c09013055ec39ddde86b487aefcf8b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1acea0d934ee0f2b914b0b893736e8fe4e"/><section>
    <title>test_commit_code_with_jira_connection_failure()</title>
<indexterm><primary>test_commit_code_with_jira_connection_failure</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_commit_code_with_jira_connection_failure</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_commit_code_with_jira_connection_failure ( self,  mock_error,  mock_warning,  mock_info,  mock_git_folder_search,  mock_doc_gen,  mock_jira_client,  mock_api_client)</computeroutput></para>
<para><literallayout><computeroutput>Test the commit_code function when JIRA connection fails.

This function tests the scenario where the JIRA connection fails during
a code commit. It sets up various mocks to simulate different components
of the system and then calls the `commit_code` function with specific
parameters. The function is expected to handle the JIRA connection
failure gracefully by logging an appropriate warning.

Args:
    mock_error (MagicMock): Mock for error logging.
    mock_warning (MagicMock): Mock for warning logging.
    mock_info (MagicMock): Mock for info logging.
    mock_git_folder_search (MagicMock): Mock for searching the Git folder.
    mock_doc_gen (MagicMock): Mock for generating documentation.
    mock_jira_client (MagicMock): Mock for creating a JIRA client.
    mock_api_client (MagicMock): Mock for creating an API client.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_acea0d934ee0f2b914b0b893736e8fe4e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1acc4b1e4189792a3f7c11d2a745f479c0"/><section>
    <title>test_commit_code_with_llm_client()</title>
<indexterm><primary>test_commit_code_with_llm_client</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_commit_code_with_llm_client</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_commit_code_with_llm_client ( self,  mock_error,  mock_warning,  mock_info,  mock_git_folder_search,  mock_doc_gen,  mock_llm_client,  mock_api_client)</computeroutput></para>
<para><literallayout><computeroutput>Test committing code using an LLM client.

This function sets up mock objects for various components and then calls
the `commit_code` function with specified parameters. It verifies that
the correct mocks are created and called with the appropriate arguments.

Args:
    mock_error (MagicMock): Mock object for error handling.
    mock_warning (MagicMock): Mock object for warning logging.
    mock_info (MagicMock): Mock object for info logging.
    mock_git_folder_search (MagicMock): Mock object to simulate git folder search.
    mock_doc_gen (MagicMock): Mock object for document generation.
    mock_llm_client (MagicMock): Mock object for LLM client interaction.
    mock_api_client (MagicMock): Mock object for API client interaction.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_acc4b1e4189792a3f7c11d2a745f479c0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1ac13e368262340af98b30fd8ebdac6597"/><section>
    <title>test_handle_commit()</title>
<indexterm><primary>test_handle_commit</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_handle_commit</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_handle_commit ( self,  mock_print_info,  mock_commit_code,  mock_get_token,  mock_get_llm_config,  mock_get_jira_config)</computeroutput></para>
<para><literallayout><computeroutput>Test the handle_commit function with various mock objects.

This function sets up mocks for retrieving LLM configuration, JIRA
configuration, and commit code. It then creates an argument object and
calls the handle_commit function. Finally, it verifies that the mock
functions were called with the expected arguments.

Args:
    mock_print_info (MagicMock): Mock object for printing information.
    mock_commit_code (MagicMock): Mock object for committing code.
    mock_get_token (MagicMock): Mock object for retrieving API token.
    mock_get_llm_config (MagicMock): Mock object for retrieving LLM configuration.
    mock_get_jira_config (MagicMock): Mock object for retrieving JIRA configuration.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_ac13e368262340af98b30fd8ebdac6597_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtests_1_1test__commit__commands_1_1TestCommitCommands_1a4d04b125e102190a768f65f1948f15bc"/><section>
    <title>test_setup_commit_parser()</title>
<indexterm><primary>test_setup_commit_parser</primary><secondary>tests.test_commit_commands.TestCommitCommands</secondary></indexterm>
<indexterm><primary>tests.test_commit_commands.TestCommitCommands</primary><secondary>test_setup_commit_parser</secondary></indexterm>
<para><computeroutput>def tests.test_commit_commands.TestCommitCommands.test_setup_commit_parser ( self)</computeroutput></para>
<para><literallayout><computeroutput>Set up the argument parser for the commit command.

This function configures an argument parser to handle various options
for committing changes. It adds three arguments: - &apos;-m&apos; or &apos;--message&apos;:
An optional argument to specify a contextual commit message with a
default value of &quot;N/A&quot;. - &apos;-e&apos; or &apos;--terminal&apos;: A boolean flag to open
an edit terminal before committing. - &apos;-d&apos; or &apos;--description&apos;: A boolean
flag that, when set to False, indicates the generation of a commit
message with title and description.

Args:
    parser (MagicMock): The argument parser to be configured.
</computeroutput></literallayout> </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1test__commit__commands_1_1TestCommitCommands_a4d04b125e102190a768f65f1948f15bc_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/tmp/github_reposRepoArchDocGenContext/Penify-dev/penify-cli/tests/<link linkend="_test__commit__commands_8py">test_commit_commands.py</link></section>
</section>
